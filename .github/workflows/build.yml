name: build

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*.*.*"

  pull_request:
    branches: [ "master" ]

jobs:
  build-dlls:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: prefabs-source

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: prefabs-source/Library
          key: prefabs-source-Library-${{ hashFiles('prefabs-source/Assets/**/*', 'prefabs-source/Packages/**/*', 'prefabs-source/ProjectSettings/**/*') }}
          restore-keys: |
            prefabs-source-Library-

      - name: Create Unity build
        uses: game-ci/unity-builder@v2.0.4
        with:
          projectPath: prefabs-source
          buildsPath: prefabs-source/build
          unityVersion: 2019.4.31f1
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

  determine-matrix:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: prefabs-source

    outputs:
      folders: ${{ steps.jobs.outputs.folders }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create package list
        id: jobs
        run: |
          set -exu

          cd Packages
          echo folders=$(tree -J -d -L 1 | jq -c '.[0].contents | map(.name)') >> $GITHUB_OUTPUT

########################
#       Prefabs        #
########################
  build-prefabs-source:
    runs-on: ubuntu-latest

    needs:
      - determine-matrix
      - build-dlls

    strategy:
      matrix:
        folder: ${{ fromJson(needs.determine-matrix.outputs.folders) }}

    defaults:
      run:
        shell: bash
        working-directory: prefabs-source

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://npm.pkg.github.com/@decentm'

      - name: Check if version has been updated
        id: check
        uses: EndBug/version-check@v2
        with:
          diff-search: true
          file-name: prefabs-source/Packages/${{ matrix.folder }}/package.json

      - name: Publish if changed
        if: steps.check.outputs.changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -exu

          cd ${{ matrix.folder }}
          cp $NPM_CONFIG_USERCONFIG .
          yarn publish --access=public
          cd -

########################
#         Mods         #
########################
  build-mods:
    runs-on: windows-latest

    needs:
      - build-dlls

    defaults:
      run:
        shell: pwsh
        working-directory: mods

    steps:
    - uses: actions/checkout@v3

    - name: Fetch game update info
      id: game-info
      run: |
        Invoke-WebRequest https://api.steamcmd.net/v1/info/661130 -OutFile info.json
        $hashinfo = Get-FileHash info.json
        echo "hash=$($hashinfo.hash)" >> $GITHUB_OUTPUT

    - name: Cache game files
      id: cache-game-files
      uses: actions/cache@v3
      with:
        path: mods/chilloutvr
        key: cvr-${{ steps.game-info.outputs.hash }}
        restore-keys: |
          cvr-

    - name: Setup ChilloutVR
      uses: DecentM/setup-steam-game-windows@v1.0.0
      if: steps.cache-game-files.outputs.cache-hit != 'true'
      with:
        username: ${{ secrets.STEAM_USER }}
        password: ${{ secrets.STEAM_PASSWORD }}
        gameid: 661130
        folder: mods/chilloutvr

    - name: Bootstrap CI
      run: tools/bootstrap_ci.ps1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build
      run: dotnet build --no-restore -c Release
