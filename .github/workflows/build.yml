name: build

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*.*.*"

  pull_request:
    branches: [ "master" ]

jobs:

########################
#       Prefabs        #
########################
  build-prefabs-source:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: prefabs-source

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get yt-dlp
        env:
          YT_DLP_VERSION: "2022.07.18"
          YT_DLP_FILE: "yt-dlp.exe"
        run: |
          set -e
          set +x

          mkdir -p ./dll-build/UserLibs

          YT_DLP_URL=https://github.com/yt-dlp/yt-dlp/releases/download/$YT_DLP_VERSION/$YT_DLP_FILE
          wget $YT_DLP_URL -O ./dll-build/UserLibs/$YT_DLP_FILE

      - name: Cache
        uses: actions/cache@v2
        with:
          path: prefabs-source/Library
          key: prefabs-source-Library-${{ hashFiles('prefabs-source/Assets/**', 'prefabs-source/Packages/**', 'prefabs-source/ProjectSettings/**') }}
          restore-keys: |
            prefabs-source-Library-

      - name: Create Unity build
        uses: game-ci/unity-builder@v2.0.4
        with:
          projectPath: prefabs-source
          buildsPath: prefabs-source/build
          unityVersion: 2019.4.31f1
          allowDirtyBuild: true
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

      - name: Copy files to destination
        run: |
          set -e
          set +x

          mkdir -p ./dll-build/UserLibs
          DIR=build/StandaloneWindows64/StandaloneWindows64_Data
          cp -a $DIR/Plugins/x86_64/* $DIR/Managed/LibVLCSharp.dll $DIR/Managed/DecentM.*.dll ./dll-build/UserLibs

      - name: Create zip
        uses: vimtor/action-zip@v1
        with:
          files: prefabs-source/dll-build/
          dest: DecentM.Components.zip

      - name: Upload built DLLs
        uses: actions/upload-artifact@v2
        with:
          name: DecentM.Prefabs.Raw
          path: prefabs-source/dll-build

  update-prefabs:
    runs-on: ubuntu-latest

    needs:
      - build-prefabs-source

    steps:
      - name: Checkout
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          name: DecentM.Prefabs.Raw
          path: prefabs/Assets

      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v10.1
        id: verify-changed-files
        with:
          files: |
            prefabs/Assets/*.dll
            prefabs/Assets/**/*.dll

      - uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ (!startsWith(github.ref, 'refs/tags/')) && (steps.verify-changed-files.outputs.files_changed == 'true') }}
        with:
          commit_message: "chore(prefabs): update prefabs dlls from GitHub Actions"

  build-prefabs:
    runs-on: ubuntu-latest

    needs:
      - update-prefabs

    defaults:
      run:
        shell: bash
        working-directory: prefabs

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        with:
          path: prefabs/Library
          key: prefabs-Library-${{ hashFiles('prefabs/Assets/**', 'prefabs/Packages/**', 'prefabs/ProjectSettings/**') }}
          restore-keys: |
            prefabs-Library-

      - name: Create Unity build
        uses: game-ci/unity-builder@v2.0.4
        with:
          projectPath: prefabs
          buildsPath: prefabs/build
          unityVersion: 2019.4.31f1
          buildMethod: PackageExporter.ExportPackage
          allowDirtyBuild: true
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

      - name: Upload built unitypackage
        uses: actions/upload-artifact@v2
        with:
          name: Unitypackage
          path: prefabs/output/DecentM.Prefabs.unitypackage

########################
#         Mods         #
########################
  build-mods:
    runs-on: windows-latest

    needs:
      - build-prefabs-source

    defaults:
      run:
        shell: pwsh
        working-directory: mods

    steps:
    - uses: actions/checkout@v2

    - name: Fetch game update info
      id: game-info
      run: |
        Invoke-WebRequest https://api.steamcmd.net/v1/info/661130 -OutFile info.json
        $hashinfo = Get-FileHash info.json
        Write-Output "::set-output name=hash::$($hashinfo.hash)"

    - name: Cache game files
      id: cache-game-files
      uses: actions/cache@v2
      with:
        path: mods/chilloutvr
        key: cvr-${{ steps.game-info.outputs.hash }}
        restore-keys: |
          cvr-

    - name: Setup ChilloutVR
      uses: DecentM/setup-steam-game-windows@v1.0.0
      if: steps.cache-game-files.outputs.cache-hit != 'true'
      with:
        username: ${{ secrets.STEAM_USER }}
        password: ${{ secrets.STEAM_PASSWORD }}
        gameid: 661130
        folder: mods/chilloutvr

    - uses: actions/download-artifact@v2
      with:
        name: DecentM.Prefabs.Raw
        path: mods/prefabs

    - name: Bootstrap CI
      run: tools/bootstrap_ci.ps1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build
      run: dotnet build --no-restore -c Release

    - name: Upload outputs
      uses: actions/upload-artifact@v2
      with:
        name: DecentM.Mods
        path: .\mods\chilloutvr\Mods\*.dll

  release-installables:
    runs-on: ubuntu-latest

    needs:
      - build-prefabs
      - build-mods

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: Unitypackage
          path: build-package

      - uses: actions/download-artifact@v2
        with:
          name: DecentM.Mods
          path: build-mods

      - uses: actions/download-artifact@v2
        with:
          name: DecentM.Prefabs.Raw
          path: build-prefabs

      - name: Create mods zip structure
        run: |
          find build-package build-mods build-prefabs

          mkdir -p mods-zip/Mods
          cp -a build-mods/* mods-zip/Mods/
          cp -a build-prefabs/UserLibs mods-zip/

          find mods-zip/

      - name: Create mods zip
        uses: vimtor/action-zip@v1
        with:
          files: mods-zip
          dest: DecentM.Mods.zip

      - name: Upload outputs
        uses: actions/upload-artifact@v2
        with:
          name: Release
          path: DecentM.Mods.zip

      - name: Create release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          files: |
            build-package/*
            DecentM.Mods.zip
